% The Log-Gabor Filter
% An alternative to the Gabor function is the log-Gabor function proposed by Field [1987]. Field
% suggests that natural images are better coded by filters that have Gaussian transfer functions
% when viewed on the logarithmic frequency scale. (Gabor functions have Gaussian transfer
% functions when viewed on the linear frequency scale). On the linear frequency scale the log-
% Gabor function has a transfer function of the form
% G(w) = e (-log(w/wo)2) / ( 2 (log(k/wo)^2 )
% where wo is the filter's centre frequency. To obtain constant shape ratio filters the term k/wo must
% also be held constant for varying wo. For example, a k/wo value of .74 will result in a filter
% bandwidth of approximately one octave, .55 will result in two octaves, and .41 will produce three
% octaves.
%  ----------------------------------------------------------
% LOGGABORWAVELET for Orienation mu Scale v
% - function for convolving image with log-Gabor filters
%
% Usage: EO = gaborconvolve(im, s, o) 
%
% Arguments:
% The convolutions are done via the FFT.  Many of the parameters relate 
% to the specification of the filters in the frequency plane.  
%
%   Variable       Suggested   Description
%   name           value
%  ----------------------------------------------------------
%    nscale          = 4;      Number of wavelet scales.
%    norient         = 6;      Number of filter orientations.
%    minWaveLength   = 3;      Wavelength of smallest scale filter.
%    mult            = 2;      Scaling factor between successive filters.
%    sigmaOnf        = 0.65;   Ratio of the standard deviation of the
%                              Gaussian describing the log Gabor filter's
%                              transfer function in the frequency domain
%                              to the filter center frequency. 
%    dThetaOnSigma   = 1.5;    Ratio of angular interval between filter
%                              orientations and the standard deviation of
%                              the angular Gaussian function used to
%                              construct filters in the freq. plane.
%    feedback         0/1      Optional parameter.  If set to 1 a message
%                              indicating which orientation is being
%                              processed is printed on the screen.
%
% Returns:
%
%   filter a 2D array of real valued results
%  
%
% Notes on filter settings to obtain even coverage of the spectrum
% dthetaOnSigma 1.5
% sigmaOnf  .85   mult 1.3
% sigmaOnf  .75   mult 1.6     (bandwidth ~1 octave)
% sigmaOnf  .65   mult 2.1
% sigmaOnf  .55   mult 3       (bandwidth ~2 octaves)
%                                                       
% For maximum speed the input image should be square and have a 
% size that is a power of 2, but the code will operate on images
% of arbitrary size.  
%
%
% The determination of mult given sigmaOnf is entirely empirical
% What I do is plot out the sum of the filters in the frequency domain
% and see how even the coverage of the spectrum is.
% If there are concentric 'gaps' in the spectrum one needs to
% reduce mult and/or reduce sigmaOnf (which increases filter bandwidth)
%
% If there are 'gaps' radiating outwards then one needs to reduce
% dthetaOnSigma (increasing angular bandwidth of the filters)
%

% For details of log-Gabor filters see: 
% D. J. Field, "Relations Between the Statistics of Natural Images and the
% Response Properties of Cortical Cells", Journal of The Optical Society of
% America A, Vol 4, No. 12, December 1987. pp 2379-2394

function filter = LogGaborWavelet(rows, cols, o, s)

%--------------------------------------------------------------------------
% The number of filter orientations
% This, in conjunction with the angular spread of each filter, specifies the resolution of the
% orientation information you obtain from the filters. 
norient=8;
%--------------------------------------------------------------------------
% Filter bandwidth
% The filter bandwidth is set by specifying the ratio of the standard deviation of the Gaussian
% describing the log Gabor filter's transfer function in the log-frequency domain to the filter center
% frequency. This is set by the parameter sigmaOnf . The smaller sigmaOnf is the larger the
% bandwidth of the filter. Empirically a sigmaOnf value of 0.75 will result in a filter with a 
% bandwidth of approximately 1 octave and a value of 0.55 will result in a bandwidth of roughly 2 octaves.

sigmaOnf=.75; 
%--------------------------------------------------------------------------

% The angular spread of each filter
% Here again one plays off the demands of even spectral coverage and independence of filter
% output. The angular interval between filter orientations is fixed by the number of filter
% orientations. In the frequency domain the spread of 2D log-Gabor filter in the angular direction is
% simply a Gaussian with respect to the polar angle around the centre. The angular overlap of the
% filter transfer functions is controlled by the ratio of the angular interval between filter
% orientations and the standard deviation of the angular Gaussian spreading function. Within the
% code this ratio is controlled by the parameter dThetaOnSigma. A value of dThetaOnSigma = 1.5
% results in approximately the minimum overlap needed to get even spectral coverage.

dThetaOnSigma=1.5;
%--------------------------------------------------------------------------
% Scaling between centre frequencies
% Having set a filter bandwidth one is then in a position to decide on the scaling between centre
% frequencies of successive filters (mult). It is here one has to play off the conflicting demands of
% even spectral coverage and independence of filter output.
% Here is a table of values, determined experimentally, that result in the minimal overlap necessary
% to achieve fairly even spectral coverage.
% sigmaOnf .85 mult 1.3
% sigmaOnf .75 mult 1.6 (bandwidth ~1 octave)
% sigmaOnf .65 mult 2.1
% sigmaOnf .55 mult 3 (bandwidth ~2 octaves)

mult = 2;
%--------------------------------------------------------------------------
% Maximum frequency
% The maximum frequency is set by the wavelength of the smallest scale filter, this is controlled by
% the parameter minWaveLength. The smallest value you can sensibly use here is the Nyquist
% wavelength of 2 pixels, however at this wavelength you will get considerable alaising and I
% prefer to keep the minimum value to 3 pixels or above.

% Minimum frequency
% The minimum frequency is set by the wavelength of the largest scale filter. This is implicitly
% defined once you have set the number of filter scales (nscale), the scaling between centre
% frequencies of successive filters (mult), and the wavelength of the smallest scale filter.
% maximum wavelength = minWavelength * mult^(nscale-1)
% minimum frequency = 1 / maximum wavelength

minWavelength =  8;
%--------------------------------------------------------------------------
    
% The first step is to compute a matrix the same size as the image where every value of the matrix
% contains the normalised radius from the centre on the matrix. Values range from 0 at the middle
% to 0.5 at the boundary
[x,y] = meshgrid( (-cols/2:(cols/2-1))/cols, (-rows/2:(rows/2-1))/rows);

radius = sqrt(x.^2 + y.^2);       % Matrix values contain *normalised* radius from centre.

radius(round(rows/2+1),round(cols/2+1)) = 1; % Get rid of the 0 radius value in the middle 
                                             % so that taking the log of the radius will 
                                             % not cause trouble.
%--------------------------------------------------------------------------
% we calculate the angular component that controls the orientation selectivity of the filter.
% This is simply a Gaussian with respect to the polar angle around the centre. The Gaussian is
% centred at some angle angl, and has standard deviation thetaSigma.

% Precompute sine and cosine of the polar angle of all pixels about the
% centre point					     

theta = atan2(-y,x);              % Matrix values contain polar angle.
                                  % (note -ve y is used to give +ve
                                  % anti-clockwise angles)
sintheta = sin(theta);
costheta = cos(theta);

thetaSigma = pi/norient/dThetaOnSigma;  % Calculate the standard deviation of the
                                        % angular Gaussian function used to
                                        % construct filters in the freq. plane.
    
angl = o*pi/norient;           % Calculate filter angle.

% Pre-compute filter data specific to this orientation
% For each point in the filter matrix calculate the angular distance from the
% specified filter orientation.  To overcome the angular wrap-around problem
% sine difference and cosine difference values are first computed and then
% the atan2 function is used to determine angular distance.

ds = sintheta * cos(angl) - costheta * sin(angl);     % Difference in sine.
dc = costheta * cos(angl) + sintheta * sin(angl);     % Difference in cosine.
dtheta = abs(atan2(ds,dc));                           % Absolute angular distance.
spread = exp((-dtheta.^2) / (2 * thetaSigma^2));      % Calculate the angular filter component.
%--------------------------------------------------------------------------
wavelength = minWavelength * mult^s;        % Initialize filter wavelength.

%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Filters are constructed in terms of two components.
% 1. The radial component, which controls the frequency band that the filter responds to
% 2. The angular component, which controls the orientation that the filter responds to.
% The two components are multiplied together to construct the overall filter.
% Here we construct the radial component of the filter based on given, desired filter
% wavelength. The bandwidth of the filter is controlled by the parameter sigmaOnf.
fo = 1.0/wavelength;                  % Centre frequency of filter.

logGabor = exp((-(log(radius/fo)).^2) / (2 * log(sigmaOnf)^2));  
logGabor(round(rows/2+1),round(cols/2+1)) = 0; % Set the value at the center of the filter
                                               % back to zero (undo the radius fudge).
%--------------------------------------------------------------------------
filter = fftshift(logGabor .* spread); % Multiply by the angular spread to get the filter
                                       % and swap quadrants to move zero frequency 
                                       % to the corners.

end








    



